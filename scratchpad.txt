-- test exec file ----------------------------------------
yue_resume: top = 1
vm:0x40000378
index[1]=8(thread)
yue_resume: co stack
vm:0x4000be78
index[1]=6(function)
index[2]=6(function)
call function:  keepalive
parse:keepalive>keepalive:00000000
pbuf: m_ptr=(nil)
pbuf: m_ptr=(nil)
init_wbuf: 12 (nil)
session : connect success
vm:0x4000be78
index[1]=7(userdata)
index[2]=4(string?)
yue_resume: after resume (0x4000be78:1)
vm:0x4000be78
index[1]=7(userdata)
index[2]=4(string?)
yue_resume: end
pbuf: m_ptr=0x7d3b60
operator () (stream_handler)fd =12, connect_handler success
state_change: 0x6f42ac: 1 -> 2
coro:op() 0x6f42ac, 2, 0x4000be78
vm:0x4000be78
index[1]=7(userdata)
index[2]=4(string?)
wbuf send: commit 45 byte
wbuf send: write attached now
session::write attach 12
init_wbuf: 12 0x6f42ac
write(12,0): send 29 byte
write finish: proceed 45
pbuf: m_ptr=(nil)
recv resp: msgid = 1004
return value    string?
call function:  notify_keepalive
parse:notify_keepalive>keepalive:00000001

Breakpoint 3, yue::module::ll::future::init (vm=0x4000be78, ll=...) at ll/lua//lua.cpp:125
125                     lua_error_check(vm, (ft->m_co = ll.create(&(ft->m_y))), "create coroutine");
(gdb) p &(ft->m_state)
$10 = (U8 *) 0x4000bef8 ""
(gdb) watch *0x4000bef8
Hardware watchpoint 4: *0x4000bef8
(gdb) d 3
(gdb) c
Continuing.
=========== future ptr = 0x4000bed8
wbuf send: commit 63 byte
wbuf send: write attached now
session::write attach 12
init_wbuf: 12 0x6f42ac
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4000bed8
setcallback: reset stack
Hardware watchpoint 4: *0x4000bef8

Old value = 0
New value = 1
yue::module::ll::future::callback (vm=0x4000be78) at ll/lua//lua.cpp:104
104                             lua_settop(ft->m_co->vm(), 0);  /* reset stack (because sent arg still on stack) */
(gdb) c
Continuing.
call function:  notify_keepalive
=========== future ptr = 0x40007dd8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
actor::gc session 0x6f40ac closed
close: called 9
return value    userdata: 0x40007dd8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40003270
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40003270
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40001f90
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40001f90
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40010e30
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40010e30
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40009110
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40009110
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x400090a0
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x400090a0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x400098e8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x400098e8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x400095b0
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x400095b0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000bd68
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4000bd68
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000d300
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4000d300
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000a060
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4000a060
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000c358
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4000c358
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000dbe0
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4000dbe0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000da28
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4000da28
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40011a58
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40011a58
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40011638
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40011638
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40009c88
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40009c88
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40009800
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40009800
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000bf98
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4000bf98
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000d868
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4000d868
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000ed50
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4000ed50
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40010698
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40010698
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000f0f8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4000f0f8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000e210
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4000e210
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000a8b0
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4000a8b0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000abb0
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4000abb0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x400128f8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x400128f8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40012bf8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40012bf8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40012ef8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40012ef8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x400131f8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x400131f8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40014108
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40014108
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40014408
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40014408
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40014708
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40014708
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40014a08
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40014a08
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40014d08
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40014d08
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40015008
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40015008
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40015308
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40015308
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40015608
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40015608
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40015908
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40015908
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40015c08
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40015c08
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40015f08
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40015f08
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40016208
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40016208
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40016508
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40016508
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40016808
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40016808
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40016b08
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40016b08
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40016e08
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40016e08
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40017108
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40017108
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40017408
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40017408
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40013530
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40013530
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40013830
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40013830
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40013db0
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40013db0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40018290
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40018290
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40018590
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40018590
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40013b58
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40013b58
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40017708
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40017708
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40017a08
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40017a08
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40017d08
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40017d08
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40018008
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40018008
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40018ca8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40018ca8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40018fa8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40018fa8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x400192a8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x400192a8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x400195a8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x400195a8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001b0b8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4001b0b8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001b3b8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4001b3b8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001b6b8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4001b6b8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001b9b8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4001b9b8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001bcb8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4001bcb8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001bfb8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4001bfb8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001c2b8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4001c2b8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x400127d0
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x400127d0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001c770
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4001c770
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001ca70
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4001ca70
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001cd70
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4001cd70
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001d070
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4001d070
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001d370
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4001d370
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001d670
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4001d670
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001d970
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4001d970
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001dc70
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4001dc70
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001df70
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4001df70
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001e270
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4001e270
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001e570
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4001e570
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x400133f8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x400133f8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001e968
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4001e968
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001eb68
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4001eb68
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001eda8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x4001eda8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x400184e8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x400184e8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40013af0
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40013af0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x400176a8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x400176a8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40010618
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40010618
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40007ec0
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
return value    userdata: 0x40007ec0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x400124c8
wbuf send: commit 47 byte
vm:0x4000be78
index[1]=7(userdata)
Hardware watchpoint 4: *0x4000bef8

Old value = 1
New value = 72
0x0000000000414ccc in lj_alloc_free (msp=0x40000010, ptr=0x4000bec0) at lj_alloc.c:1304
1304          set_free_with_pinuse(p, psize, next);
(gdb) bt
#0  0x0000000000414ccc in lj_alloc_free (msp=0x40000010, ptr=0x4000bec0) at lj_alloc.c:1304
#1  0x000000000041c413 in gc_sweep (g=0x400003b8, p=0x4001c2a0, lim=0) at lj_gc.c:404
#2  0x000000000041d1cf in gc_onestep (L=0x4000be78) at lj_gc.c:631
#3  0x000000000041d648 in lj_gc_step (L=0x4000be78) at lj_gc.c:675
#4  0x00000000004095ce in lua_pushfstring (L=0x40000010, fmt=0x450bb0 "%s: %p")
    at lj_api.c:612
#5  0x000000000043ee06 in lj_ffh_tostring (L=0x4000be78) at lib_base.c:260
#6  0x000000000041bb7d in lj_fff_fallback ()
#7  0x0000000000000001 in ?? ()
#8  0x0000000000000001 in ?? ()
#9  0x0000000000000002 in ?? ()
#10 0x000000214000be78 in ?? ()
#11 0x00007fffffff8da1 in ?? ()
#12 0x0000000000000001 in ?? ()
#13 0x000000000043ef40 in ?? () at lib_base.c:384
#14 0x0000000040009928 in ?? ()
#15 0x000000004000be78 in ?? ()
#16 0x000000000043f02f in lj_cf_print (L=0x4000be78) at lib_base.c:498
#17 0x000000000041a2b9 in lj_BC_FUNCC ()
#18 0x000000024000c278 in ?? ()
#19 0x00000000000003ec in ?? ()
#20 0x0000000000000000 in ?? ()






















Start it from the beginning? (y or n) y
Starting program: /usr/local/bin/ljd -i test.lua
LuaJIT 2.0.0-beta8 -- Copyright (C) 2005-2011 Mike Pall. http://luajit.org/
[Thread debugging using libthread_db enabled]
__  ____ __ __    ____  
\ \ \  // / \ \  / ___\ 
 \ \/ / | | | | / /     
  \  /  | | | | ~~~~~~~~    version 0.1.0(LuaJIT 2.0.0-beta8)
 _/ /   \ \_/ / \ \___  
 \_/     \___/   \____/  
it's brilliant on the cloud

(c)2009 - 2011 Takehiro Iyatomi(iyatomi@gmail.com)
-- test sync mode ----------------------------------------
call function:  keepalive
parse:keepalive>keepalive:00000000
pbuf: m_ptr=(nil)
pbuf: m_ptr=(nil)
init_wbuf: 9 (nil)
session : connect success
poller readable 9 nr w
operator () (stream_handler)fd =9, connect_handler success
state_change: 0x6f40ac: 1 -> 2
after read: 9 valid
wbuf send: commit 63 byte
wbuf send: write attached now
session::write attach 9
init_wbuf: 9 0x6f40ac
write(9,0): send 47 byte
write finish: proceed 63
pbuf: m_ptr=(nil)
return value    44
-- test aync mode ----------------------------------------
yue_resume: top = 1
vm:0x40000378
index[1]=8(thread)
yue_resume: co stack
vm:0x40010b88
index[1]=6(function)
index[2]=6(function)
call function:  notify_error_test
parse:notify_error_test>error_test:00000001
pbuf: m_ptr=(nil)
pbuf: m_ptr=(nil)
init_wbuf: 11 (nil)
session : connect success
poller readable 11 nr w
operator () (stream_handler)fd =11, connect_handler success
state_change: 0x6f41ac: 1 -> 2
after read: 11 valid
=========== future ptr = 0x40010e38
wbuf send: commit 73 byte
wbuf send: write attached now
session::write attach 11
init_wbuf: 11 0x6f41ac
vm:0x40010b88
index[1]=7(userdata)
return value    userdata: 0x40010e38
setcallback: reset stack
pbuf: m_ptr=(nil)
pbuf: m_ptr=0x7cae00
check_timeout: 0x2aaaab2c504c thrs=5000000
write(11,0): send 57 byte
write finish: proceed 73
recv resp: msgid = 1002
vm:0x40010e68
index[1]=6(function)
false   -7      ll/lua/bootstrap.lua:21: test error!!
-- test aync mode2 ----------------------------------------
yue_resume: top = 1
vm:0x40000378
index[1]=8(thread)
yue_resume: co stack
vm:0x400112f8
index[1]=6(function)
index[2]=6(function)
call function:  error_test
parse:error_test>error_test:00000000
wbuf send: commit 73 byte
wbuf send: write attached now
session::write attach 11
init_wbuf: 11 0x6f41ac
vm:0x400112f8
index[1]=7(userdata)
index[2]=3(1.000000)
index[3]=3(2.000000)
index[4]=3(4.000000)
index[5]=3(4.000000)
yue_resume: after resume (0x400112f8:1)
vm:0x400112f8
index[1]=7(userdata)
index[2]=3(1.000000)
index[3]=3(2.000000)
index[4]=3(4.000000)
index[5]=3(4.000000)
yue_resume: end
pbuf: m_ptr=0x7d3340
write(11,0): send 57 byte
write finish: proceed 73
recv resp: msgid = 1003
return value    table: 0x40011408
catch error     -7      ll/lua/bootstrap.lua:21: test error!!
-- test aync mode3 ----------------------------------------
yue_resume: top = 1
vm:0x40000378
index[1]=8(thread)
yue_resume: co stack
vm:0x40011878
index[1]=6(function)
index[2]=6(function)
call function:  error_test
wbuf send: commit 73 byte
wbuf send: write attached now
session::write attach 11
init_wbuf: 11 0x6f41ac
vm:0x40011878
index[1]=7(userdata)
index[2]=3(1.000000)
index[3]=3(2.000000)
index[4]=3(4.000000)
index[5]=3(4.000000)
yue_resume: after resume (0x40011878:1)
vm:0x40011878
index[1]=7(userdata)
index[2]=3(1.000000)
index[3]=3(2.000000)
index[4]=3(4.000000)
index[5]=3(4.000000)
yue_resume: end
pbuf: m_ptr=0x7d3b60
write(11,0): send 57 byte
write finish: proceed 73
recv resp: msgid = 1004
return value    table: 0x40011968
catch error2    -7      ll/lua/bootstrap.lua:21: test error!!
catch error3    -7      ll/lua/bootstrap.lua:21: test error!!
-- test exec file ----------------------------------------
yue_resume: top = 1
vm:0x40000378
index[1]=8(thread)
yue_resume: co stack
vm:0x40007ea8
index[1]=6(function)
index[2]=6(function)
call function:  keepalive
parse:keepalive>keepalive:00000000
pbuf: m_ptr=(nil)
pbuf: m_ptr=(nil)
init_wbuf: 12 (nil)
session : connect success
vm:0x40007ea8
index[1]=7(userdata)
index[2]=4(string?)
yue_resume: after resume (0x40007ea8:1)
vm:0x40007ea8
index[1]=7(userdata)
index[2]=4(string?)
yue_resume: end
pbuf: m_ptr=0x7d3340
operator () (stream_handler)fd =12, connect_handler success
state_change: 0x6f42ac: 1 -> 2
coro:op() 0x6f42ac, 2, 0x40007ea8
vm:0x40007ea8
index[1]=7(userdata)
index[2]=4(string?)
wbuf send: commit 45 byte
wbuf send: write attached now
session::write attach 12
init_wbuf: 12 0x6f42ac
write(12,0): send 29 byte
write finish: proceed 45
pbuf: m_ptr=(nil)
recv resp: msgid = 1005
return value    string?
call function:  notify_keepalive
parse:notify_keepalive>keepalive:00000001
=========== future ptr = 0x4000c230
wbuf send: commit 63 byte
wbuf send: write attached now
session::write attach 12
init_wbuf: 12 0x6f42ac
vm:0x40007ea8
index[1]=7(userdata)
actor::gc session 0x6f40ac closed
close: called 9
return value    userdata: 0x4000c230
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40010e38
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40010e38
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000f0f8
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4000f0f8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40008e08
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40008e08
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40008d50
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40008d50
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40002dc8
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40002dc8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40007c48
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40007c48
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000ecd0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4000ecd0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40008f58
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40008f58
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40009498
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40009498
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000a148
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4000a148
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000c630
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4000c630
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000dca8
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4000dca8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000f038
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4000f038
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40011e60
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40011e60
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40011a88
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40011a88
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000dac8
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4000dac8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40003c10
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40003c10
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40009f88
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40009f88
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40009b20
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40009b20
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40001808
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40001808
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000ee88
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4000ee88
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000d5e8
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4000d5e8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40010720
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40010720
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40009648
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40009648
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40012b60
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40012b60
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40012e60
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40012e60
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40013160
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40013160
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40013460
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40013460
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40013760
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40013760
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40013a60
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40013a60
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40013d60
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40013d60
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40014060
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40014060
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40014360
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40014360
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40014660
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40014660
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40014960
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40014960
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40014c60
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40014c60
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40014f60
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40014f60
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000e2b8
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4000e2b8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000e5b8
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4000e5b8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40015868
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40015868
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40015b68
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40015b68
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40015e68
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40015e68
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40016168
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40016168
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40015260
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40015260
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40015560
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40015560
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40016a70
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40016a70
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40016468
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40016468
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40016768
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40016768
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40016ff0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40016ff0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x400172f0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x400172f0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x400175f0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x400175f0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x400178f0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x400178f0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40017bf0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40017bf0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40018b10
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40018b10
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40016d98
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40016d98
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40019228
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40019228
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40019528
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40019528
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40019828
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40019828
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000d2d0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4000d2d0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40019ce0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40019ce0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40019fe0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40019fe0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001a2e0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001a2e0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001a5e0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001a5e0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001a8e0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001a8e0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001abe0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001abe0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001aee0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001aee0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001b1e0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001b1e0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001b4e0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001b4e0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001b7e0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001b7e0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001bae0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001bae0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001bde0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001bde0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001c0e0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001c0e0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001c3e0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001c3e0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001c6e0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001c6e0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001c9e0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001c9e0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001cce0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001cce0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001cfe0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001cfe0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001d2e0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001d2e0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001d5e0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001d5e0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001d8e0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001d8e0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001dbe0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001dbe0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001dee0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001dee0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001e1e0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001e1e0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4001e4e0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4001e4e0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40017e88
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40017e88
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40018108
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40018108
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40018308
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40018308
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40018588
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40018588
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x400187a8
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x400187a8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40018a28
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40018a28
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000d6d0
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4000d6d0
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x400095e8
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x400095e8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000c118
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4000c118
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x400029e8
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x400029e8
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x4000c230
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x4000c230
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40008d50
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40008d50
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40008f58
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40008f58
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40011e60
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40011e60
setcallback: reset stack
call function:  notify_keepalive
=========== future ptr = 0x40018b10
wbuf send: commit 47 byte
vm:0x40007ea8
index[1]=7(userdata)
return value    userdata: 0x40018b10
setcallback: reset stack
yue_lh: ptr delete : 0x7c2130
fd=9 closed
key not found
state_change: 0x6f40ac: 2 -> 3
0x6f40ac: m_failure = 2
state_change: 0x6f40ac: 3 -> 4
basic_processor::close 9
pbuf: m_ptr=0x7d3340
write(12,0): send 4700 byte
write finish: proceed 4716
recv resp: msgid = 1006
vm:0x40010e20
index[1]=6(function)
 -------------------------- run callback =---------------------
call function:  keepalive
wbuf send: commit 63 byte
wbuf send: write attached now
session::write attach 12
init_wbuf: 12 0x6f42ac
vm:0x40010e20
index[1]=7(userdata)
index[2]=3(55.000000)
index[3]=3(66.000000)
index[4]=3(77.000000)
recv resp: msgid = 1007

Program received signal SIGSEGV, Segmentation fault.
0x00002aaaaaaf79ce in yue::module::ll::lua::attached (this=0xfffffffb40007f50)
    at ./ll/lua/lua.h:270
270             inline class fabric *attached() const { return m_attached; }
(gdb) p up
No symbol "up" in current context.
(gdb) up
#1  0x00002aaaaab0d23e in yue::module::ll::future::resume (this=0x40010e38, f=..., o=...)
    at ll/lua//lua.cpp:146
146                     if (m_co->ll().attached() == &f) {
(gdb) p this
$1 = (yue::module::ll::future * const) 0x40010e38
(gdb) 


yue.run(function ()
	yue.try(function () 
	
	end)
	:catch(function ()
	
	end)
	:finally(function ()
	
	end)
end)
















require 'bignum'

bn = bignum.new("123456789123456789123456789")

assert(bn == yue.connect('tcp://localhost:8888').send_bignum(bn))

-- bignum.lua --







require 'yue'

function test()
	local c = yue.open('tcp://localhost:8888')
	for v = 0, 1000, 1 do
		local sent_time = c.keepalive(yue.now())
		local elapsed = (yue.now() - sent_time);
	end
end

function init()
	for v = 0, 1000, 1 do
		test()
	end
end

function yue.open(addr)
	local c = yue.connect(addr)
	local omt = c.getmetatable()
	local mt = {
		__index = function (obj, key) 
			return obj[key] if obj[key]
			local r = {
				co = coroutine.create(function (...) 
					return omt.__index[key](...)
				end)
			}
			local comt = {
				__call = function (callee, ...)
					return coroutine.resume(callee.co, ...)
				end
			}
			r.setmetatable(comt)
			return r
		end, 
		__newindex = omt.__newindex
	}
	c.setmetatable(mt)
	return c
end













-------------------------------------------------------

struct session_pool {
	array<session> m_ss;
	int init(net *s, int max_hint);
	void fin();
	
	int connect(const char *addr, handler h) {
		session *s = m_ss.alloc();
		if (!s) { return INVALID_MSGID; }
		return s->connect(addr, h);
	}
};

struct session_mesh {
	map<session, const char *> m_ss;
	int init(net *s, int max_hint);
	void fin();
	
	int connect(const char *addr, handler h) {
		session *s = m_ss.alloc(addr);
		if (!s) { return INVALID_MSGID; }
		return s->connect(addr, h);
	}
};

fiber *f; fabric fbr;
session_pool sp;
MSGID msgid = sp.connect(addr, f);
fabric::yield(f, msgid);

template <>
inline int procedure<callproc::rval, callproc::args>
	::operator () (remote_session r) {
	fabric &fbr = fabric::tlf();
	serializer &sr = fbr.sr();
	verify_success(sr.pack_response(res, fiber::obj().msgid()));
	if (r < 0) {
		fiber::respond(fbr.packer(),
			fbr.set_last_error(NBR_ECONNECT, fiber::obj().msgid(), c_nil()));
		fiber::fin();
		return NBR_OK;
	}
	return invoke(fbr, fiber::obj());
}

struct session_mesh {
	
};









static int lua::connection::index(VM vm) {
}
static int lua::connection::newindex(VM vm) {
}

static int lua::method::call(VM vm) {
	method *m = reinterpret_cast<method *>(lua_touserdata(vm, -2));
	lua_error_check(vm, m, "invalid meta-method call\n"); 
	if (m->m_conn.m_ra.valid()) {
		coroutine *co = to_co(vm);
		lua_error_check(vm, co, "not call from coroutine\n");
		PROCEDURE(callproc)::args a(co);
		msgid = PROCEDURE(callproc)::call(m->m_conn.m_ra, a);
		lua_error_check(vm, msgid != INVALID_MSGID, "fail to send command\n")
		lua_error_check(vm, ll().attached()->yield(fb(), msgid) >= 0, "fail to yield\n");
		lua_error_check(vm, co->yield() >= 0, "fail to lua_yield\n");
	}
	else {
		MSGID msgid = serializer::new_id();
		lua_error_check(vm, ll().attached()->yield(fb(), msgid) >= 0, "fail to yield\n");
		lua_error_check(vm, ll().attached()->mesh().connect(m->m_conn.m_host, watcher(msgid)) >= 0, "fail to connect\n");
		return NBR_OK;
	}
}

template <>
int procedure<callproc::rval, callproc::args>
	::operator () (remote_actor &ra, int r) {
	fabric &fbr = fabric::tlf();
	if (r < 0) {
		msgid = m_connmgr.connect(m->m_conn.m_host);
		if (msgid != INVALID_MSGID) {
			fiber::respond(fbr.packer(),
			fbr.set_last_error(NBR_ECONNECT, fiber::obj().msgid(), "reconnection fails"));
			return NBR_OK;
		}
		if (fbr.yield(this, msgid) != fiber::exec_yield) {
			fiber::respond(fbr.packer(),
			fbr.set_last_error(NBR_EEXPIRE, fiber::obj().msgid(), "reconnection fails"));
			return NBR_OK;
		}
	}
}


rpc_mt = {
	__call : function (self, ...) {
		return self.actor.rpc(self.uuid, self.k, ...)
	}
}

method_mt = {
	__index : function (obj, key)
		local v = obj[key]
		if v then return v
		v = {
			uuid : obj.__uuid
			k : key,
			actor : yue.hspace.from(obj.__uuid)
		}
		setmetatable(v, rpc_mt)
		obj[key] = v
		return v;
	end
}


function yue:bless(class)
	if _G[class] then 
		return _G[class]
	end
	local c = {}
	local mt = {
		__index = function (t, k) 
			return c[k]
		end
	}
	c.new = function (...)
		local v = {
			__uuid : obj.__uuid
		}
		if yue.hspace.from(v.uuid) == yue.current then
			setmetatable(v, mt)
		else
			setmetatable(v, method_mt)
		end
		v:initialize(...)
		return v
	end
	_G[class] = c
	return c
end

yue.bless("Player")
function Player:initialize(name, conn)
	self.conn = conn
	self.name = name
	self.male = self:select_sex()
	self.birthday = self:select_birthday()
end
function Player:select_sex()
	return self.conn.select_sex()
end
function Player:select_birthday()
	return self.conn.select_birthday()
end
function Player:attack(target)
	if self.male then
		target.caught_damage(rand() % 100)
	else
		target.caught_damage(rand() % 50)
	end
end


obj.func => 'method' if obj.func is originally nil otherwise correspond object.
obj.func2 = obj.func obj.func2 is 'method'
function testfunc(obj) => if testfunc is called from rpc, what should be returned to caller?
	return obj.func
end

client:
obj.func(obj) => ???

server:
function func(o)
	return o.func2 nil or correspond object if blessed. 'method' or correspond object otherwise.
end

y['tcp://10.0.0.1:8888/']
y['tcp://10.0.0.2:8888/']
y['tcp://10.0.0.3:8888/']
y[0]	0th worker
y[1]	1th worker
...
y[N]	Nth worker




struct connection {
	remote_actor m_conn;
}; /* has connection_index */
struct method {
	connection *c;
	char name[256];
} /* has method_call */;


//yue lua scripting overview


client:
y = require('yue')
c = y.connect('tcp://localhost:8888') # c is empty table with metatable
printf(c.f(100, 200, 300)) # 600


p = y.connect('tcp://localhost:8888').login('iyatomi', 'koei1000', 'Player')
p:move_to(10, 20, 30)
p:get_hp() # 6

function client_choose_birth_place()
	return ListBox.new('tokyo', 'kanagawa', 'saga').open()
end


server:
y = require('yue')

function f(a1, a2, a3)
	return a1 + a2 + a3;
end

Player = {}
y.bless(Player)
function Player.new()
	p = {}
	p.hp = 6
	p.x,p.y,p.z = g_start_pos[client_choose_birth_place()];
	return p;
end
function Player:move_to(dx, dy, dz)
	self.x += dx
	self.y += dy
	self.z += dz
end
function Player:get_hp()
	return self.hp
end


//fiber joint (mesh)

namespace yue {
namespace util {
namespace mesh {
template <class PTPL, class ATPL>
struct parallel {
	int operator () (fabric &, object &o) {
	}
};




template <class TPL>
struct step {

};

template <class TPL>
struct cycle {
};

}
}

}

typedef util::mesh::parallel<util::tuple<keepalive, keepalive, keepalive> > k3;
keepalive::args a1, a2, a3;
a1.m_tstamp = a2.m_tstamp = a3.m_tstamp = util::time::now();

util::tuple<remote_actor, remote_actor, local_actor> actor(ra, ra2, la);
k3::args args(a1, a2, a3);

k3::call(actor, arg);

PROCEDURE(three_keepalive)::args a;
PROCEDURE(three_keepalive)::call(ra, a);






//how to map serialize object and struct

struct A {
	float 	m_a1;
	U32		m_a2;
	char	*m_a3;
	float a1();
	U32 a2();
	char *a3();
	
	int pack(serializer &sr) {
		sr << m_a1;
		sr << m_a2;
		sr << m_a3;
		return sr.len();
	}
};

=> 

A a;
a.pack(sr);

pbuf pbf;
memcpy(pbf.p(), sr.p(), min(pbf.len(), sr.len()));

object o;
sr.unpack(o, pbf, o.sbf());

o.arg(0) => type:float, value:m_a1
o.arg(1) => type:U32, value:m_a2
o.arg(2) => type:char*, value:m_a3

struct A_wrapper {
	union {
		A *a;
		object o_A;
	};
	int type;
	
	A_wrapper(A *ta) : type(local), a(ta) {}
	A_wrapper(object &o)  : type(remote), o_A(o) {}
	
	float a1() { 
		switch(type) {
			remote: return o_A.arg(0);
			local: return a->a1();
		}
	}
	U32 a2() { 
		switch(type) {
			remote: return o_A.arg(1);
			local: return a->a2();
		}
	}
	char *a3() { 
		switch(type) {
			remote: return o_A.arg(2);
			local: return a->a3();
		}
	}
};

struct struct_command1 {
	float m_a1;
	U32 m_a2;
	char *m_a3;

	U8 cmd() { return rpc::proc::command1; }
};


template <class SOURCE>
struct command1 {
	SOURCE src;
	float	a1();
	U32	a2();
	char	*a3();
};

template<>
command1::a1<object>() {
	return src.arg(0);
}
template<>
command1::a1<struct_command1>() {
	return m_a1;
}

procedure<remote_actor, object>
procedure<local_actor, struct_command1>

template <class 


