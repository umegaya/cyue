# global setting
SRCDIR = 'src'
TESTDIR = 'test'
BINDIR = 'bin'

# it behaves like make -C
def rake_c(dir, task = nil)
	a = Array.new
	dir.split('/').each do |token|
		token == '.' ? a.push(token) : a.push('..')
	end
	Dir.chdir(dir)
	task = "rake" if not task 
	sh task do |ok,r|
		throw r if not ok
	end
	Dir.chdir(a.join('/'))
	true
end

# build related tasks
namespace :build do
	task :clean do
		rake_c(SRCDIR, "scons -c")
	end
	task :debug do
		rake_c(SRCDIR, "scons build=debug")
	end
	task :release do
		rake_c(SRCDIR, "scons build=release")
	end
end

# install related tasks
task :install do
	rake_c(SRCDIR, "scons install build=release")
end

task :uninstall do
	rake_c(SRCDIR, "scons uninstall")
end

# running related tasks
namespace :run do
	task :server do
		rake_c(BINDIR, "./yue ../test/lua/_server.lua wc=2")
	end
	task :client do
		rake_c(BINDIR, "./yue ../test/lua/_client.lua")
	end
end

# test related tasks
namespace :test do
	task :all => [:unit] do
	end
	task :unit do
		spawn("rake run:server")
		sh "sleep 1"
		rake_c(TESTDIR + "/lua")
	end
	task :leak do
		rake_c(BINDIR, "valgrind --leak-check=full --show-reachable=yes ./yue ../#{TESTDIR}/lua/_server.lua")
	end
end

# deploy related tasks
namespace :deploy do
end

# generic task
task :default => ["build:debug"]
task :clean => ["build:clean"]
