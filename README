__  ____ __ __    ____
\ \ \  // / \ \  / ___\
 \ \/ / | | | | / /
  \  /  | | | | ~~~~~~~~    version 0.3.6(LuaJIT 2.0.0)
 _/ /   \ \_/ / \ \___
 \_/     \___/   \____/
it's brilliant on the cloud

(c)2011 - 2012 Takehiro Iyatomi(iyatomi@gmail.com)



- what is this? - 
yue is server frame work mainly designed for real-time network applicaiton like MMO
which uses persistent connection and batched RPC.
for the first time, yue development starts under japanese government subsidy (called MITOU project http://www.ipa.go.jp/jinzai/mitou/2009/2009_2/hontai/gaiyou/kk-1.html)

- coroutine based, efficient RPC execution (transparent from server to client, server to server) it will be perform over 370k qps on 1 connection batched RPC, 33k qps with 1000 connection (1core, 512MB memory Virtual Box VM)
- easy to federate huge number of nodes and threads by using simple RPC (it looks like give single big user land environment)
- suitable for both multi-core single node and single core multi-node because yue's execution unit is native-thread of each node and its not distinguish remote and local
- build in websocket protocol and js library. you can use power of yue easily from html5 browser (test/websocket/yue.js and msgpack.js)


- installation - 
required: 
	ruby & python
	rake >= 0.8.7 (as make)
	scons >= 2.1.0 (as autotool, if you do not have scons installed, please use the one under tools directory)
	luajit >= 2.0.0
	
build:
	cd yue; rake;

first play: 
        cd yue; rake run:server 
        open test/websocket/index.html with Chrome and press any button on html
        if your yue server does not run on same host as Chrome, please add parameter ?host=your_host to index.html.
        see test/lua/_3000.lua, test/lua/_3001.lua and see what yue does.

install:
	rake install

uninstall:
	rake uninstall


- license - 
yue is planed to be released under license of LGPL, 
with some exception of usage (see license.txt).



implicit dependencies (these are included in src/util/exlib and autometically used):
	sha1(CC):			Akira Noumi(noumiakira AT users DOT sourceforge DOT jp)
	base64(CC):			Chris Venter(chris.venter@gmail.com	http://rocketpod.blogspot.com)
	murmurhash2(?):		good hash routine by Austin Appleby(aappleby@gmail.com)
	cityhash: 		also good hash routine by Geoff Pike and Jyrki Alakuijala
	SFMT(MIT):			fast and good PRNG by  Mutsuo Saito (Hiroshima University) and Makoto Matsumoto (Hiroshima University)
	msgpack.js(?)		javascript implementation of msgpack by @uupaa
