import os
import subprocess
from pprint import pprint

import SCons

# define the custom function
from SCons.Script.SConscript import SConsEnvironment
SConsEnvironment.Chmod = SCons.Action.ActionFactory(os.chmod,
        lambda dest, mode: 'Chmod("%s", 0%o)' % (dest, mode))

def InstallPerm(env, dest, files, perm):
    obj = env.Install(dest, files)
    for i in obj:
        env.AddPostAction(i, env.Chmod(str(i), perm))
    return dest

# put this function "in" scons
SConsEnvironment.InstallPerm = InstallPerm

# but let's say we're not happy yet, we'd prefer nicer names.
SConsEnvironment.InstallBinary = lambda env, dest, files: InstallPerm(env, dest, files, 0755)
SConsEnvironment.InstallHeader = lambda env, dest, files: InstallPerm(env, dest, files, 0644)


prefix = "/usr/local/"
build_dir = "../.obj/src/"
bin_dir = "../bin/"
(env, bin_name, lib_names) = SConscript("./build.py", variant_dir = build_dir, duplicate = 0)
test_env = env.Clone()
test_env.Append(LIBS = [bin_name], LIBPATH = build_dir)
test_env.Program(build_dir + "ut", Glob("test/*.cpp"))
main_env = env.Clone()
main_env.Append(LIBS = [bin_name], LIBPATH = build_dir)
main_env.Program(build_dir + "yue", Glob("main/*.cpp"))
VariantDir('../bin', ".", duplicate = 0)
so_name = 'lib' + bin_name + env['SHLIBSUFFIX']
Command(bin_dir + bin_name, build_dir + bin_name, Copy("$TARGET", "$SOURCE"))
Command(bin_dir + so_name, build_dir + so_name, Copy("$TARGET", "$SOURCE"))
Command(bin_dir + 'ut', build_dir + 'ut', Copy("$TARGET", "$SOURCE"))
# create install target
env.Alias("install", env.InstallBinary(os.path.join(prefix, "bin"), bin_dir + bin_name))
env.Alias("install", env.InstallBinary(os.path.join(prefix, "lib"), bin_dir + so_name))
env.Alias("install", env.InstallHeader(os.path.join("/etc", "ld.so.conf.d"), "ld.yue.conf"))

for lib in lib_names:
	libpath = bin_dir + os.path.basename(lib["file"])
	Command(libpath, os.path.join(lib["path"], lib["file"]), Copy("$TARGET", "$SOURCE"))
	# create install target
	env.Alias("install", env.InstallBinary(os.path.join(prefix, lib["install_path"]), libpath))

#installer: 
if 'install' in COMMAND_LINE_TARGETS:
	subprocess.call(["sudo", "/sbin/ldconfig", "-v"])

#uninstaller
if 'uninstall' in COMMAND_LINE_TARGETS:
	env.Command("uninstall", None, Delete(FindInstalledFiles()))
