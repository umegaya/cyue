## ゲームのインフラの作成
- ## まずゲームの仕様以外に最低でも以下の機能の実装が必要
#### payment
#### SNS connect (facebook or line)
#### push notification
- ## 2dメインのフレームワークではmoai SDKを使えばある程度実装されている
#### push notificationはそのままであればmoai cloudを使う必要がある。売れたら自前で実装し直すことになるかもしれない
- ## 3dメインのフレームワークでは実装されているものはない
- ## 今回はmoai SDKで行く(3Dもたぶんサポートされていくはず）
#### paymentのサーバー側は必要


## yueとmoai SDKとのインテグレーション
- ## メモリの削減が必要（現在30MBぐらい使うので）
#### androidに関してはもしかするとandroid NDKを使って何かしなくてはいけないかも


## データの保存への対応
- ## yueそのものにはデータを保存しておく機能はない
#### なにかストレージ mysql or drizzle or hbase + redis
#### いずれにせよyueから上記のソフトウェアにアクセスするライブラリを用意する必要があると思う
#### mysqlはlua-mysql, redisはlua-hiredisがあるのでそれを使えばいい、drizzleはyueに一番マッチするが多分開発が必要


## 運用用の準備
- ## rightscaleのserver templateとか
- ## git repoのmasterにpushしたらdeployされるようにしたい
- ## 監視用のスクリプトは自前になると思う


## stats?
- ## treasure data使うか？
- ## 本気で使うなら月$1599
- ## 無料からはじめる感じ


## lua(yue)を使うリスク
- ## サーバーの安定性
#### yue自体が安定しない場合
#### yueとstorageの相性が悪くstorageへの書き込みが安定しない場合
- ## チートに対してyueに深刻な脆弱性がある場合
#### 誰も使っていないプロダクトなので脆弱性が十分明らかになっていない
- ## サーバーとクライアントの接続性が悪い場合
#### 実際のモバイル回線で正常に常時接続、または再接続を維持できるか
#### できたとしてバッテリーの持ちやモバイルデバイス上の処理負荷はどうなるか

## 作業
- インテグレーションとデータの保存 1 ~ 2 week
- 運用のための準備 1 week
-- 同時にテスト用のアプリを作ってサーバーとクライアントの接続性を試す
- 大体うまく行きそうならゲーム自体の開発へgo
-- だめなら工夫で乗り切れそうか調べる(1 weekぐらい）、それでもダメならluaを使うのは諦める

payment
 gideros or moai SDK
 
SNS connect (line? facebook?)
 facebook: moai SDK or gideros iOS
 line: nothing supports (develop from scratch)
 
push notification (gcm, apn)
 moai SDK
 
 => prefer to use moai SDK

integration with client framework (ShiVa3d, moai SDK, corona SDK)
- for iOS, only reduce footprint required (already runs in OSX environment)
- for android, NDK may required (possible?)

integration with storage engine
- mysql? drizzle? hbase + (yue or redis)?
- implement connector for it

server template for yue
server observation for yue

stats system for yue 
 - treasure data? for actual usage, < $1599/month required (can start from free)

risk
server stability
 - stability for yue itself
 - storage performance
server durability for malformed request
server - client connectivity
 - is connection easily recovered?
 - how about battery life?





async縺ｮ繧ｳ繝ｼ繝ｫ繝舌ャ繧ｯ縺ｧerror繧貞他繧薙□蝣ｴ蜷医↓縲’iber縺檎ｵゆｺ�☆繧九□縺代〒迚ｹ縺ｫ繧ｨ繝ｩ繝ｼ縺後←縺薙↓繧Ｑropagate縺輔ｌ縺ｪ縺�ｼ医し繝ｼ繝舌�髢薙�rpc縺ｮ蝣ｴ蜷医�蜻ｼ縺ｳ蜃ｺ縺怜�縺ｫ繧ｳ繝ｼ繝ｫ繝舌ャ繧ｯ縺輔ｌ繧九�縺夲ｼ�
try縺ｧ蝗ｲ繧薙□譎ゅ↓catch遽�↓propagate縺輔ｌ繧九�縺後リ繝√Η繝ｩ繝ｫ縺�ｍ縺�
縺ｩ縺�ｄ縺｣縺ｦ繧�ｋ縺ｮ縺�
future縺ｮ繧ｳ繝ｼ繝ｫ繝舌ャ繧ｯ縺後お繝ｩ繝ｼ繧定ｿ斐＠縺滓凾縺ｫ蜻ｼ縺ｰ繧後ｋ繧ｳ繝ｼ繝ｫ繝舌ャ繧ｯ縺ｯ菴懊▲縺�
try蜊倅ｽ阪〒菴ｿ繧上ｌ繧鞠uture縺ｫ髢｢縺励※callback繧定ｨｭ螳壹〒縺阪ｌ縺ｰ縺�＞
future縺ｮfactory(yue.future)縺荊ry豈弱↓鄂ｮ縺肴鋤繧上ｋ��
future縺ｯyue.fiber, yue.client縺九ｉ縺励°蜻ｼ縺ｰ繧後↑縺��縺ｧ縲√％縺薙�fiber繧堤ｽｮ縺肴鋤縺医ｉ繧後ｌ縺ｰ...













- travis CI
- yue.socket.read, yue.socket.write
- yue.http
- integrate require with luarocks
- homepage
	- step by step tutorial
	- API reference
- irc channel
















local rpc = yue.rpcwrap
local c = yue.open('tcp://10.0.0.1:8888')
local r1, r2 = rpc(c).function_name(arg1, arg2)








蝠城｡鯉ｼ�
luajit VM level縺ｧ縲�ｼ代▽縺ｮ繧ｳ繝阪け繧ｷ繝ｧ繝ｳ繧誕ccept縺吶ｋ縺ｮ縺ｯ�代▽縺ｮ繧ｹ繝ｬ繝�ラ縺�￠縺ｧ縺ゅｋ縺後�繧ｳ繝阪け繧ｷ繝ｧ繝ｳ縺九ｉ縺ｮ繝��繧ｿ縺ｮ蜻ｼ縺ｳ蜃ｺ縺暦ｼ医♀繧医�繝代�繧ｹ�峨�
縺昴�繧ｹ繝ｬ繝�ラ縺ｨ蛻･縺ｮ繧ｹ繝ｬ繝�ラ縺瑚｡後≧縺薙→縺後≠繧九�迴ｾ迥ｶ縺ｮ螳溯｣�□縺ｨ縲〉equest繧貞女菫｡縺励◆蝣ｴ蜷医�蜿嶺ｿ｡縺励◆繧ｹ繝ｬ繝�ラ縺掲iber繧堤函謌舌＠縺ｦ螳溯｡後ｒ陦後≧縺薙→縺ｫ縺ｪ縺｣縺ｦ縺�◆縺後�
蜿嶺ｿ｡縺励◆繧ｹ繝ｬ繝�ラ縺ｯ繧ｳ繝阪け繧ｷ繝ｧ繝ｳ繧誕ccept縺励※縺�↑縺�◆繧√�繧ｳ繝阪け繧ｷ繝ｧ繝ｳ縺ｫ蟇ｾ蠢懊☆繧杵amespace縺瑚ｨｭ螳壹＆繧後※縺�↑縺�◆繧�未謨ｰ縺ｮ螳溯｡後′陦後∴縺ｪ縺��
(listner縺ｯ蟄伜惠縺吶ｋ縺溘ａ髢｢謨ｰ閾ｪ菴薙�隱ｭ縺ｿ霎ｼ縺ｾ繧後※縺ｯ縺�ｋ�峨←縺ｮ繧医≧縺ｫ縺薙�繧ｱ繝ｼ繧ｹ縺ｧ繧よｭ｣蟶ｸ縺ｫfiber繧貞ｮ溯｡後＆縺帙ｋ縺九�

隗｣豎ｺ譯茨ｼ�
*1 繧ｳ繝阪け繧ｷ繝ｧ繝ｳ縺ｮ繧ｪ繝ｼ繝翫�縺ｨ縺ｪ繧逆hread繧偵さ繝阪け繧ｷ繝ｧ繝ｳ繧ｪ繝悶ず繧ｧ繧ｯ繝医↓險倬鹸縺励※縺翫＞縺ｦ縲∝女菫｡縺励◆繧ｹ繝ｬ繝�ラ縺後が繝ｼ繝翫�縺ｧ縺ｪ縺代ｌ縺ｰ繧ｪ繝ｼ繝翫�縺ｸdelegate縺吶ｋ
*2 accept縺励◆繧ｹ繝ｬ繝�ラ縺ｧ縺ｪ縺��蜷医�縺ｪ繧薙→縺詰istner縺ｮnamespace縺九ｉ蜻ｼ縺ｳ蜃ｺ縺吶∋縺埼未謨ｰ繧貞ｼ輔▲蠑ｵ縺｣縺ｦ縺阪※螳溯｡後＆縺帙ｋ縲�
*3 accept縺励◆繧ｹ繝ｬ繝�ラ縺御ｻ悶�繧ｹ繝ｬ繝�ラ縺ｫ繧Ｂccept縺輔○縺溽憾諷九↓縺吶ｋ縺薙→縺ｧ縲√←縺ｮ繧ｹ繝ｬ繝�ラ縺ｫ縺翫＞縺ｦ繧ょ撫鬘後�繧ｳ繝阪け繧ｷ繝ｧ繝ｳ繧誕ccept縺励◆迥ｶ諷九↓縺吶ｋ縲�

object縺ｸ縺ｮ繧｢繧ｯ繧ｻ繧ｹ繧堤悄縺ｫ繧ｷ繝ｼ繧ｱ繝ｳ繧ｷ繝｣繝ｫ縺ｫ縺励◆縺��縺ｧ縺ゅｌ縺ｰ*1
*2縺ｯ蜃ｦ逅�′迚ｹ谿雁喧縺吶ｋ縺溘ａ縲√＆縺代◆縺�ｼ医＠縺九ｂ邨仙ｱ�uajit荳翫�繧ｪ繝悶ず繧ｧ繧ｯ繝医�谺ｲ縺励＞)
accept縺励◆繧ｹ繝ｬ繝�ラ縺ｧ縺ｪ縺��蜷医�縺ゅｉ縺溘ａ縺ｦaccept縺吶ｋ縺具ｼ�>菴募屓繧�_open縺ｪ縺ｩ縺悟他縺ｰ繧後※縺励∪縺��縺ｯ雖後□
*3縺ｧ繧ゅ＞縺�′縲‥elegate蜷ｫ繧√ち繧､繝溘Φ繧ｰ縺ｧ縺ｮ繝舌げ縺悟､壹￥縺ｪ繧翫◎縺��

*1縺九↑縺�
縺励°縺怜ｼｷ荳�ｲｫ諤ｧ縺悟ｿ�ｦ√↑縺上※荳ｦ蛻怜ｺｦ繧偵≠縺偵◆縺�こ繝ｼ繧ｹ縺後≠繧九□繧阪≧縺九ｉ縺ｧ縺阪ｌ縺ｰdelegate蠢��縺ｫ縺ｯ縺励◆縺上↑縺�



a -> b -> c -> d execute a => b -> c -> d -> a
a -> b -> c -> d execute b => a -> c -> d -> b
a -> b -> c -> d execute c => a -> b -> d -> c
a -> b -> c -> d execute d => a -> b -> c -> d

1, remove entry
2, append it to last



class linkedqueue<T> {)
    struct element {
        volatile struct element *m_next;
        T m_data;
        element(T &data) : m_next(NULL), m_data(data) {}
    }
    static struct element m_sentinel;
    thread_local array<element> m_pool;
    volatile struct element *m_top, *m_tail;
    volatile U32 m_version;
    linkedqueue() : m_top(&m_sentinel), m_tail(&m_sentinel) {}
    T *push(T &data) {
        element *e = m_pool.alloc(data);
        while (true) {
            element *tail = m_tail, *next = tail->m_next;
            if (next) {
                cas(&m_tail, tail, next);
            }
            else {
                if (cas(&(tail->m_next), NULL, e)) {
                    cas(&m_tail, m_tail, e);
                    return e->m_data;
                }
            }
        }
    }
    
    T *pop() {
        while (true) {
            element *top = m_top->m_next;
            if (top) {
                element *next = top->m_next, *nn = NULL;
                if (next) { nn = next->m_next; }
                if (cas(&(top->m_next), next, nn)) {
                    return next;
                }
            }
            return NULL;
        }
    }
    
    T *clear() {
        //m_top->m_next => NULL
        //m_tail => m_sentinel
        return cas(&m_top, m_top, &m_sentinel);
    }
    
    
}


fiber::wait(emittable *e, event_id id, UINT32 t_o) {
    fiber::watcher *w = new_watcher();
    w->m_msgid = serializer::new_id();
    return fabric::suspend(
}




listener (server socket)
__open		:	譁ｰ縺励＞謗･邯壹ｒ蜿励￠莉倥￠縺�protocol level) listener縺ｮon_read縺ｧ蜿励￠莉倥￠繧峨ｌ縺滓磁邯壹↓蟇ｾ縺励※縲”andshake縺悟ｮ御ｺ�＠縺溷ｾ悟他縺ｰ繧後ｋ縲�
					繧ｵ繝ｼ繝舌�蛛ｴ縺ｯ縲√け繝ｩ繧､繧｢繝ｳ繝医∈縺ｮrpc縺ｯ縺薙�譎らせ縺九ｉ蜿ｯ閭ｽ縺ｪ縺ｮ縺ｧ繝代せ繝ｯ繝ｼ繝峨→繧｢繧ｫ繧ｦ繝ｳ繝医�蜈･蜉帙ｒ豎ゅａ縺溘ｊ縺励※繧｢繝励Μ繧ｱ繝ｼ繧ｷ繝ｧ繝ｳ繝ｬ繝吶Ν縺ｧ縺ｮestablish縺ｮ縺溘ａ縺ｮ蜃ｦ逅�ｒ髢句ｧ九☆繧�
__accept	:	繧ｯ繝ｩ繧､繧｢繝ｳ繝医°繧峨�rpc繧貞女縺台ｻ倥￠縺ｦ繧医＞迥ｶ諷九↓縺ｪ縺｣縺溘�隱崎ｨｼ繝医Λ繧､繧｢繝ｫ縺悟ｮ御ｺ�＠縺溘→縺�≧縺薙→縲Ｔerver socket縺ｫ蟇ｾ縺励※__grant縺悟他縺ｰ繧後◆縲�
					縺薙�縺溘ａ縺ｫ蠢�★繧ｵ繝ｼ繝舌�縺ｯ繧ｯ繝ｩ繧､繧｢繝ｳ繝医↓蟇ｾ縺励※菴輔ｉ縺九�rpc繧貞他縺ｳ蜃ｺ縺励※縲《ocket:__grant繧貞他縺ｳ縺�＆縺ｪ縺�→縺�￠縺ｪ縺�′蜷榊燕縺瑚�縺医ｂ縺ｮ縲�
__close		: 	謗･邯壹′髢峨§縺�protocol level)
__data			:	繝��繧ｿ繧貞女菫｡縺励◆縲Ｓaw socket縺�￠縲�

socket (clietn socket)
__open		:	譁ｰ縺励＞謗･邯壹ｒ蜿励￠莉倥￠縺�protocol level) open縺励◆socket縺ｫ縺溘＞縺励※縲”andshake縺悟ｮ御ｺ�＠縺溷ｾ悟他縺ｰ繧後ｋ縲�
__accept	:	繧ｵ繝ｼ繝舌�縺ｫ蟇ｾ縺励※rpc繧貞ｮ溯｡後〒縺阪ｋ迥ｶ諷九↓縺ｪ縺｣縺溘�
					accepted__縺ｨ縺�≧build-in縺ｮ髢｢謨ｰ縺悟他縺ｳ蜃ｺ縺輔ｌ縲√◎縺ｮ荳ｭ縺ｧ__grant縺悟他縺ｰ繧後◆蠕後％縺ｮ髢｢謨ｰ縺悟他縺ｰ繧後ｋ縲�
					繧ｵ繝ｼ繝舌�繧偵ユ繧ｹ繝医☆繧九％縺ｨ縺悟庄閭ｽ縲�
__close		: 	謗･邯壹′髢峨§縺�protocol level)
__data			:	繝��繧ｿ繧貞女菫｡縺励◆縲Ｓaw socket縺�￠縲�

timer
__tick			: 	tick event 縺檎匱蜍輔＠縺�

signal
__signal		:	signal handler縺悟他縺ｳ蜃ｺ縺輔ｌ縺�

thread
__end			:  繧ｹ繝ｬ繝�ラ縺檎ｵゆｺ�＠縺�

fs
__****			:  縺ゅ→縺ｧ縲ゅ＞繧阪ｓ縺ｪ繧､繝吶Φ繝�











yue.core.open
yue.core.connect
yue.core.listen
yue.core.timer
yue.core.signal







c = yue.core.open("hoge://huga");
c.__accepted = function ()
end 
c.__closed = function ()
end

e = c.anyfunc(a, b, c, d)

















endpoint => (stream_endpoint, datagram_endpoint, loop_endpoint)  invoker->respond(serializer, object)


fiber {
	int respond(serializer, data) {
		invoker->respond(serializer, data)
	}
	
	int resume(type, object) {
		if (this->owner() != fiber::current_thread()) {
			this->delegate(this->owner(), object);
			return;
		}
		switch(coroutine->resume(object)) {
		yield:		return;
		finish:		this->respond(serializer, coroutine);
		error:		this->respond(serializer, coroutine);
		}
	}
}

accept : 
fabric::tlf()->create()->resume(type_accept, { parent_fd, accepted_fd });

read : 
fabric::tlf()->create()->resume(type_read, { parent_fd, read_fd });	

proc : 
fabric::tlf()->create()->resume(type_proc, { parent_fd, object }); //only this returns response

open : 
fabric::tlf()->create()->resume(type_open, opened_fd)

close : 
fabric::tlf()->create()->resume(type_close, closed_fd)

timer : 
fabric::tlf()->create()->resume(type_timer, timer_id);

signal : 
fabric::tlf()->create()->resume(type_signal, signal_no);







__peer().control_jquery("#disapper", "hide")




yue.core.listen('ws://0.0.0.0:8888/chat')
yue.core.open('ws://10.0.0.1:8888/chat')


released files

yue			: the yue server
yue.so 		: core C++ library to access yue
yuec.lua	: core lua library to access yue (built on yue.so)
					access yue from luajit console
					running yue as master, slave
wsynth.lua	: library build on yuel.lua, which implements scalable complex system on IaaS.


yue module

yue.core		-- basic feature
yue.core.poll
yue.core.connect
yue.core.listen
yue.core.timer
yue.core.stop_timer
yue.core.die
yue.core.try
yue.core.open

yue.dev			-- features to develop library integrate with yue
yue.dev.read
yue.dev.write
yue.dev.yield

yue.client 	-- modules to access yue from luajit console (or client program)
yue.client.run
yue.client.exec
yue.client.mode

yue.master		-- features related master node 
yue.master.connections

yue.uuid
yue.uuid.new

yue.hspace
yue.hspace.__newindex


yue.util
yue.util.time.now
yue.util.time.clock





yue.open('http://www.foo.com').controller.action({k1 = v1, k2 = v2, k3 = v3})
 => http://www.foo.com/controller/action?k1=v1&k2=v2&k3=v3




local t = yue.timer(1.0f, function () 
end)






local c = yue.connect('udp://multicast:9999')

try(function() 
		c.find_node():timed_callback(5.0f, function(ok,r)
			if ok then
				yue.master_conns.insert(yue.open(r))
				if #yue.master_conns < 3 then
					self.finish()
				end
			else if r[1] == yue.NBR_ETIMEOUT then
				print('cannot find enough number of master node')
				error(e)
			end
		end
	end,
	function(e) -- catch
		print('cannot find enough number of master node', e)
		return false
	end,
	function() -- finally
	end
)




yue.run(function ()
	yue.try(function () 
	
	end)
	:catch(function ()
	
	end)
	:finally(function ()
	
	end)
end)
















require 'bignum'

bn = bignum.new("123456789123456789123456789")

assert(bn == yue.connect('tcp://localhost:8888').send_bignum(bn))

-- bignum.lua --







require 'yue'

function test()
	local c = yue.open('tcp://localhost:8888')
	for v = 0, 1000, 1 do
		local sent_time = c.keepalive(yue.now())
		local elapsed = (yue.now() - sent_time);
	end
end

function init()
	for v = 0, 1000, 1 do
		test()
	end
end

function yue.open(addr)
	local c = yue.connect(addr)
	local omt = c.getmetatable()
	local mt = {
		__index = function (obj, key) 
			return obj[key] if obj[key]
			local r = {
				co = coroutine.create(function (...) 
					return omt.__index[key](...)
				end)
			}
			local comt = {
				__call = function (callee, ...)
					return coroutine.resume(callee.co, ...)
				end
			}
			r.setmetatable(comt)
			return r
		end, 
		__newindex = omt.__newindex
	}
	c.setmetatable(mt)
	return c
end













-------------------------------------------------------

struct session_pool {
	array<session> m_ss;
	int init(net *s, int max_hint);
	void fin();
	
	int connect(const char *addr, handler h) {
		session *s = m_ss.alloc();
		if (!s) { return INVALID_MSGID; }
		return s->connect(addr, h);
	}
};

struct session_mesh {
	map<session, const char *> m_ss;
	int init(net *s, int max_hint);
	void fin();
	
	int connect(const char *addr, handler h) {
		session *s = m_ss.alloc(addr);
		if (!s) { return INVALID_MSGID; }
		return s->connect(addr, h);
	}
};

fiber *f; fabric fbr;
session_pool sp;
MSGID msgid = sp.connect(addr, f);
fabric::yield(f, msgid);

template <>
inline int procedure<callproc::rval, callproc::args>
	::operator () (remote_session r) {
	fabric &fbr = fabric::tlf();
	serializer &sr = fbr.sr();
	verify_success(sr.pack_response(res, fiber::obj().msgid()));
	if (r < 0) {
		fiber::respond(fbr.packer(),
			fbr.set_last_error(NBR_ECONNECT, fiber::obj().msgid(), c_nil()));
		fiber::fin();
		return NBR_OK;
	}
	return invoke(fbr, fiber::obj());
}

struct session_mesh {
	
};









static int lua::connection::index(VM vm) {
}
static int lua::connection::newindex(VM vm) {
}

static int lua::method::call(VM vm) {
	method *m = reinterpret_cast<method *>(lua_touserdata(vm, -2));
	lua_error_check(vm, m, "invalid meta-method call\n"); 
	if (m->m_conn.m_ra.valid()) {
		coroutine *co = to_co(vm);
		lua_error_check(vm, co, "not call from coroutine\n");
		PROCEDURE(callproc)::args a(co);
		msgid = PROCEDURE(callproc)::call(m->m_conn.m_ra, a);
		lua_error_check(vm, msgid != INVALID_MSGID, "fail to send command\n")
		lua_error_check(vm, ll().attached()->yield(fb(), msgid) >= 0, "fail to yield\n");
		lua_error_check(vm, co->yield() >= 0, "fail to lua_yield\n");
	}
	else {
		MSGID msgid = serializer::new_id();
		lua_error_check(vm, ll().attached()->yield(fb(), msgid) >= 0, "fail to yield\n");
		lua_error_check(vm, ll().attached()->mesh().connect(m->m_conn.m_host, watcher(msgid)) >= 0, "fail to connect\n");
		return NBR_OK;
	}
}

template <>
int procedure<callproc::rval, callproc::args>
	::operator () (remote_actor &ra, int r) {
	fabric &fbr = fabric::tlf();
	if (r < 0) {
		msgid = m_connmgr.connect(m->m_conn.m_host);
		if (msgid != INVALID_MSGID) {
			fiber::respond(fbr.packer(),
			fbr.set_last_error(NBR_ECONNECT, fiber::obj().msgid(), "reconnection fails"));
			return NBR_OK;
		}
		if (fbr.yield(this, msgid) != fiber::exec_yield) {
			fiber::respond(fbr.packer(),
			fbr.set_last_error(NBR_EEXPIRE, fiber::obj().msgid(), "reconnection fails"));
			return NBR_OK;
		}
	}
}


rpc_mt = {
	__call : function (self, ...) {
		return self.actor.rpc(self.uuid, self.k, ...)
	}
}

method_mt = {
	__index : function (obj, key)
		local v = obj[key]
		if v then return v
		v = {
			uuid : obj.__uuid
			k : key,
			actor : yue.hspace.from(obj.__uuid)
		}
		setmetatable(v, rpc_mt)
		obj[key] = v
		return v;
	end
}


function yue:bless(class)
	if _G[class] then 
		return _G[class]
	end
	local c = {}
	local mt = {
		__index = function (t, k) 
			return c[k]
		end
	}
	c.new = function (...)
		local v = {
			__uuid : obj.__uuid
		}
		if yue.hspace.from(v.uuid) == yue.current then
			setmetatable(v, mt)
		else
			setmetatable(v, method_mt)
		end
		v:initialize(...)
		return v
	end
	_G[class] = c
	return c
end

yue.bless("Player")
function Player:initialize(name, conn)
	self.conn = conn
	self.name = name
	self.male = self:select_sex()
	self.birthday = self:select_birthday()
end
function Player:select_sex()
	return self.conn.select_sex()
end
function Player:select_birthday()
	return self.conn.select_birthday()
end
function Player:attack(target)
	if self.male then
		target.caught_damage(rand() % 100)
	else
		target.caught_damage(rand() % 50)
	end
end


obj.func => 'method' if obj.func is originally nil otherwise correspond object.
obj.func2 = obj.func obj.func2 is 'method'
function testfunc(obj) => if testfunc is called from rpc, what should be returned to caller?
	return obj.func
end

client:
obj.func(obj) => ???

server:
function func(o)
	return o.func2 nil or correspond object if blessed. 'method' or correspond object otherwise.
end

y['tcp://10.0.0.1:8888/']
y['tcp://10.0.0.2:8888/']
y['tcp://10.0.0.3:8888/']
y[0]	0th worker
y[1]	1th worker
...
y[N]	Nth worker




struct connection {
	remote_actor m_conn;
}; /* has connection_index */
struct method {
	connection *c;
	char name[256];
} /* has method_call */;


//yue lua scripting overview


client:
y = require('yue')
c = y.connect('tcp://localhost:8888') # c is empty table with metatable
printf(c.f(100, 200, 300)) # 600


p = y.connect('tcp://localhost:8888').login('iyatomi', 'koei1000', 'Player')
p:move_to(10, 20, 30)
p:get_hp() # 6

function client_choose_birth_place()
	return ListBox.new('tokyo', 'kanagawa', 'saga').open()
end


server:
y = require('yue')

function f(a1, a2, a3)
	return a1 + a2 + a3;
end

Player = {}
y.bless(Player)
function Player.new()
	p = {}
	p.hp = 6
	p.x,p.y,p.z = g_start_pos[client_choose_birth_place()];
	return p;
end
function Player:move_to(dx, dy, dz)
	self.x += dx
	self.y += dy
	self.z += dz
end
function Player:get_hp()
	return self.hp
end


//fiber joint (mesh)

namespace yue {
namespace util {
namespace mesh {
template <class PTPL, class ATPL>
struct parallel {
	int operator () (fabric &, object &o) {
	}
};




template <class TPL>
struct step {

};

template <class TPL>
struct cycle {
};

}
}

}

typedef util::mesh::parallel<util::tuple<keepalive, keepalive, keepalive> > k3;
keepalive::args a1, a2, a3;
a1.m_tstamp = a2.m_tstamp = a3.m_tstamp = util::time::now();

util::tuple<remote_actor, remote_actor, local_actor> actor(ra, ra2, la);
k3::args args(a1, a2, a3);

k3::call(actor, arg);

PROCEDURE(three_keepalive)::args a;
PROCEDURE(three_keepalive)::call(ra, a);






//how to map serialize object and struct

struct A {
	float 	m_a1;
	U32		m_a2;
	char	*m_a3;
	float a1();
	U32 a2();
	char *a3();
	
	int pack(serializer &sr) {
		sr << m_a1;
		sr << m_a2;
		sr << m_a3;
		return sr.len();
	}
};

=> 

A a;
a.pack(sr);

pbuf pbf;
memcpy(pbf.p(), sr.p(), min(pbf.len(), sr.len()));

object o;
sr.unpack(o, pbf, o.sbf());

o.arg(0) => type:float, value:m_a1
o.arg(1) => type:U32, value:m_a2
o.arg(2) => type:char*, value:m_a3

struct A_wrapper {
	union {
		A *a;
		object o_A;
	};
	int type;
	
	A_wrapper(A *ta) : type(local), a(ta) {}
	A_wrapper(object &o)  : type(remote), o_A(o) {}
	
	float a1() { 
		switch(type) {
			remote: return o_A.arg(0);
			local: return a->a1();
		}
	}
	U32 a2() { 
		switch(type) {
			remote: return o_A.arg(1);
			local: return a->a2();
		}
	}
	char *a3() { 
		switch(type) {
			remote: return o_A.arg(2);
			local: return a->a3();
		}
	}
};

struct struct_command1 {
	float m_a1;
	U32 m_a2;
	char *m_a3;

	U8 cmd() { return rpc::proc::command1; }
};


template <class SOURCE>
struct command1 {
	SOURCE src;
	float	a1();
	U32	a2();
	char	*a3();
};

template<>
command1::a1<object>() {
	return src.arg(0);
}
template<>
command1::a1<struct_command1>() {
	return m_a1;
}

procedure<remote_actor, object>
procedure<local_actor, struct_command1>

template <class 


